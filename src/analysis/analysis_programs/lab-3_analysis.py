# -*- coding: utf-8 -*-
"""LAB3analysis(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JRQXWEeNRpkxYKBsZCtAPpkAmiMwEqU
"""

from google.colab import drive
drive.mount('/content/drive')

pip install bagpy

pip install distfit

import bagpy
from bagpy import bagreader
import pandas as pd
import seaborn as sea
from matplotlib import pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np
import math
import statistics
from sklearn.datasets import load_diabetes
from fitter import Fitter, get_common_distributions
import distfit

# Commented out IPython magic to ensure Python compatibility.
imucsv = pd.read_csv('/content/drive/MyDrive/LAB3/sri15finalmindata_2022-10-22-19-38-08/imu.csv')

x = imucsv['IMU.orientation.x']
y = imucsv['IMU.orientation.y'] 
z = imucsv['IMU.orientation.z']
w = imucsv['IMU.orientation.w']
time_secs = imucsv['Header.stamp.secs']
time_nsecs = imucsv['Header.stamp.nsecs']
time = imucsv['Time']

def euler_from_quaternion(x, y, z, w):
        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = np.arctan2(t0, t1)
        
     
        t2 = +2.0 * (w * y - z * x)
        pitch_y = np.arcsin(t2)
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = np.arctan2(t3, t4)
        return roll_x, pitch_y, yaw_z # in radian

roll_x, pitch_y, yaw_z = euler_from_quaternion(x, y, z, w)
roll = roll_x*(180/np.pi)       
pitch = pitch_y*(180/np.pi)
yaw = yaw_z*(180/np.pi) 


print("Standard Deviation of roll is % s "
#                 % (statistics.stdev(roll)))
print(".....................................................................")
print("Mean of roll is % s "
#                 % (statistics.mean(roll)))
print(".....................................................................")

print("Standard Deviation of pitch is % s "
#                 % (statistics.stdev(pitch)))
print(".....................................................................")
print("Mean of pitch is % s "
#                 % (statistics.median(pitch)))
print(".....................................................................")

print("Standard Deviation of yaw is % s "
#                 % (statistics.stdev(yaw)))
print(".....................................................................")
print("Mean of yaw is % s "
#                 % (statistics.mean(yaw)))
print(".....................................................................")

print("Standard Deviation of angular-velocity_x is % s "
#                 % (statistics.stdev(imucsv['IMU.angular_velocity.x'])))
print(".....................................................................")
print("Mean of angular-velocity_x is % s "
#                 % (statistics.mean(imucsv['IMU.angular_velocity.x'])))
print(".....................................................................")

print("Standard Deviation of angular-velocty_y is % s "
#                 % (statistics.stdev(imucsv['IMU.angular_velocity.y'])))
print(".....................................................................")
print("Mean of angular-velocity_y is % s "
#                 % (statistics.mean(imucsv['IMU.angular_velocity.y'])))
print(".....................................................................")

print("Standard Deviation of angular-velocty_z is % s "
#                 % (statistics.stdev(imucsv['IMU.angular_velocity.z'])))
print(".....................................................................")
print("Mean of angular-velocity_z is % s "
#                 % (statistics.mean(imucsv['IMU.angular_velocity.z'])))
print(".....................................................................")

print("Standard Deviation of linear-acceleration_x is % s "
#                 % (statistics.stdev(imucsv['IMU.linear_acceleration.x'])))
print(".....................................................................")
print("Mean of linear-acceleration_x is % s "
#                 % (statistics.mean(imucsv['IMU.linear_acceleration.x'])))
print(".....................................................................")
print("Standard Deviation of linear-acceleration_y is % s "
#                 % (statistics.stdev(imucsv['IMU.linear_acceleration.y'])))
print(".....................................................................")
print("Mean of linear-acceleration_y is % s "
#                 % (statistics.mean(imucsv['IMU.linear_acceleration.y'])))
print(".....................................................................")
print("Standard Deviation of linear-acceleration_z is % s "
#                 % (statistics.stdev(imucsv['IMU.linear_acceleration.z'])))
print(".....................................................................")
print("Mean of linear-acceleration_z is % s "
#                 % (statistics.mean(imucsv['IMU.linear_acceleration.z'])))
print(".....................................................................")

print("Standard Deviation of MagField_x is % s "
#                 % (statistics.stdev(imucsv['MagField.magnetic_field.x'])))
print(".....................................................................")
print("Mean of MagField_x is % s "
#                 % (statistics.mean(imucsv['MagField.magnetic_field.x'])))
print(".....................................................................")
print("Standard Deviation of MagField_y is % s "
#                 % (statistics.stdev(imucsv['MagField.magnetic_field.y'])))
print(".....................................................................")
print("Mean of MagField_y is % s "
#                 % (statistics.mean(imucsv['MagField.magnetic_field.y'])))
print(".....................................................................")
print("Standard Deviation of MagField_z is % s "
#                 % (statistics.stdev(imucsv['MagField.magnetic_field.z'])))
print(".....................................................................")
print("Mean of MagField_z is % s "
#                 % (statistics.mean(imucsv['MagField.magnetic_field.z'])))
print(".....................................................................")

pip install Fitter

# fitter
from distfit import distfit
'''data = load_diabetes()
X, y_ = data.data, pitch

SR_y = pd.Series(y_, name="y_ (Target Vector Distribution)")

distributions = get_common_distributions()

f = Fitter(SR_y, distributions=['gamma','lognorm', "beta","burr","norm"]) 
f.fit()
f.summary()

f.get_best(method = 'sumsquare_error')



'''
pd.Series(roll).plot.hist(bins=40, title = "Roll_Frequency" )
plt.legend(['Distribution'])

x=roll
# Initialize distfit
dist = distfit()

# Determine best-fitting probability distribution for data
dist.fit_transform(x)
print(dist.summary)
dist.plot()
#pd.Series(roll).plot.hist(bins=30, title = "Roll_Frequency")
#plt.legend(['Distribution'])

plt.plot(imucsv['Time'], roll_x )
plt.title('roll_x vs Time')
plt.xlabel('Time')
plt.ylabel('roll_x')

'''pd.Series(pitch).plot.hist(bins=40, title = "Pitch_Frequency" )
plt.legend(['Distribution'])

x=pitch
# Initialize distfit
dist = distfit()

# Determine best-fitting probability distribution for data
dist.fit_transform(x)
print(dist.summary)
dist.plot()'''
pd.Series(pitch).plot.hist(bins=40, title = "Pitch_Frequency" )
plt.legend(['Distribution'])

x=pitch
# Initialize distfit
dist = distfit()

# Determine best-fitting probability distribution for data
dist.fit_transform(x)
print(dist.summary)
dist.plot()

plt.plot(imucsv['Time'], pitch_y )
plt.title('pitch_y vs Time')
plt.xlabel('Time')
plt.ylabel('pitch_y')

pd.Series(yaw).plot.hist(bins=40, title = "Yaw_Frequency" )
plt.legend(['Distribution'])

x=yaw
# Initialize distfit
dist = distfit()

# Determine best-fitting probability distribution for data
dist.fit_transform(x)
print(dist.summary)
dist.plot()

plt.plot(imucsv['Time'], yaw_z )
plt.title('yaw_z  vs Time')
plt.xlabel('seconds')
plt.ylabel('yaw_z')

pd.Series(imucsv['IMU.angular_velocity.x']).plot.hist(bins=40, title = "IMU.angular_velocity.x" )
plt.legend(['Distribution'])

# fitter
from distfit import distfit
x= imucsv['IMU.angular_velocity.x']
# Initialize distfit
dist = distfit()

# Determine best-fitting probability distribution for data
dist.fit_transform(x)
print(dist.summary)
dist.plot()

plt.plot(imucsv['Time'], imucsv['IMU.angular_velocity.x'] )
plt.title('anular_X vs Time')
plt.xlabel('Time')
plt.ylabel('anular_X')

pd.Series(imucsv['IMU.angular_velocity.y']).plot.hist(bins=40, title = "IMU.angular_velocity.y" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['IMU.angular_velocity.y'] )
plt.title('anular_y vs Time')
plt.xlabel('Time')
plt.ylabel('anular_y')

pd.Series(imucsv['IMU.angular_velocity.z']).plot.hist(bins=40, title = "IMU.angular_velocity.z" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['IMU.angular_velocity.z'] )
plt.title('anular_z vs Time')
plt.xlabel('Time')
plt.ylabel('anular_z')

pd.Series(imucsv['IMU.linear_acceleration.x']).plot.hist(bins=40, title = "IMU.linear_acceleration.x" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['IMU.linear_acceleration.x'] )
plt.title('linear_acceleration_X vs Time')
plt.xlabel('Time')
plt.ylabel('linear_acceleration_X')

pd.Series(imucsv['IMU.linear_acceleration.y']).plot.hist(bins=40, title = "IMU.linear_acceleration.y" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['IMU.linear_acceleration.y'] )
plt.title('linear_acceleration_y vs Time')
plt.xlabel('Time')
plt.ylabel('linear_acceleration_y')

pd.Series(imucsv['IMU.linear_acceleration.z']).plot.hist(bins=40, title = "IMU.linear_acceleration.z" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['IMU.linear_acceleration.z'] )
plt.title('linear_acceleration_z vs Time')
plt.xlabel('Time')
plt.ylabel('linear_acceleration_z')

pd.Series(imucsv['MagField.magnetic_field.x']).plot.hist(bins=40, title = "MagField.magnetic_field.x" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['MagField.magnetic_field.x'] )
plt.title('magnetic_field_x vs Time')
plt.xlabel('Time')
plt.ylabel('magnetic_field_x')

pd.Series(imucsv['MagField.magnetic_field.y']).plot.hist(bins=40, title = "MagField.magnetic_field.y" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['MagField.magnetic_field.y'] )
plt.title('magnetic_field_y vs Time')
plt.xlabel('Time')
plt.ylabel('magnetic_field_y')

pd.Series(imucsv['MagField.magnetic_field.z']).plot.hist(bins=40, title = "MagField.magnetic_field.z" )
plt.legend(['Distribution'])

plt.plot(imucsv['Time'], imucsv['MagField.magnetic_field.z'] )
plt.title('magnetic_field_z vs Time')
plt.xlabel('Time')
plt.ylabel('magnetic_field_z')

# Commented out IPython magic to ensure Python compatibility.
from mpl_toolkits import mplot3d
# %matplotlib inline
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.plot3D(roll_x, pitch_y, yaw_z, 'gray')
ax.scatter3D(roll_x, pitch_y, yaw_z, c=pitch_y, cmap='Greens')
ax.contour3D(roll_x, pitch_y, yaw_z, 50, cmap='binary')
ax.set_xlabel('roll_x')
ax.set_ylabel('pitch_y')
ax.set_zlabel('yaw_z')